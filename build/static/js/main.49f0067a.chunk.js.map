{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","window","onblur","event","document","fullscreenElement","preventDefault","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","this","player","videojs","videoNode","props","version_info","VERSION","getPluginVersion","RecordRTC","version","log","on","record","start","addEventListener","console","id","confirm","stopDevice","fullscreen","saveAs","element","error","warn","deviceErrorCode","dispose","elem","getElementById","requestFullscreen","catch","err","alert","data-vjs-player","ref","node","className","playsInline","onClick","getDevice","Component","Boolean","location","hostname","match","videoJsOptions","controls","bigPlayButton","width","height","fluid","plugins","audio","video","maxLength","debug","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"kVAgHeA,G,8LAjGQ,IAAD,OAElBC,OAAOC,OAAS,SAAUC,GACpBC,SAASC,oBACXF,EAAMG,iBACFF,SAASG,eACXH,SAASG,iBACAH,SAASI,oBAClBJ,SAASI,sBACAJ,SAASK,qBAClBL,SAASK,uBACAL,SAASM,kBAClBN,SAASM,qBAMfC,KAAKC,OAASC,kBAAQF,KAAKG,UAAWH,KAAKI,OAAO,WAEhD,IAAMC,EAAe,kBAAoBH,UAAQI,QAC/C,wBAA0BJ,UAAQK,iBAAiB,UACnD,kBAAoBC,IAAUC,QAChCP,UAAQQ,IAAIL,MAGdL,KAAKC,OAAOU,GAAG,eAAe,WAC5B,EAAKV,OAAOW,SAASC,QACrBpB,SAASqB,iBAAiB,oBAAoB,SAACtB,GACzCC,SAASC,kBACXqB,QAAQL,IAAR,mBAAwBjB,SAASC,kBAAkBsB,GAAnD,gCAEAxB,EAAMG,iBACSL,OAAO2B,QAAQ,oDAI5B,EAAKhB,OAAOW,SAASM,aAFrB,EAAKC,oBASbnB,KAAKC,OAAOU,GAAG,eAAe,WAC5B,EAAKQ,gBAGPnB,KAAKC,OAAOU,GAAG,gBAAgB,WAC7B,EAAKV,OAAOW,SAASQ,OAAO,CAAE,MAAS,kBAGzCpB,KAAKC,OAAOU,GAAG,SAAS,SAACU,EAASC,GAChCP,QAAQQ,KAAKD,MAGftB,KAAKC,OAAOU,GAAG,eAAe,WAC5BI,QAAQO,MAAM,gBAAiB,EAAKrB,OAAOuB,sB,6CAKzCxB,KAAKC,QACPD,KAAKC,OAAOwB,Y,mCAId,IAAIC,EAAOjC,SAASkC,eAAe,WAC/BD,EAAKE,mBACPF,EAAKE,oBAAoBC,OAAM,SAAAC,GAC7BC,MAAM,qE,wCAMNtC,SAASG,gBACXH,SAASG,mB,+BAKH,IAAD,OACP,OACE,6BAEE,yBAAKoC,mBAAA,GACH,2BAAOhB,GAAG,UAAUiB,IAAK,SAAAC,GAAI,OAAI,EAAK/B,UAAY+B,GAAMC,UAAU,4BAA4BC,aAAW,KAE3G,4BAAQC,QAAS,WAAQ,EAAKpC,OAAOW,SAAS0B,cAA9C,QAEA,4BAAQD,QAAS,WAAQ,EAAKpC,OAAOW,SAASM,eAA9C,a,GA5FUqB,cCFEC,QACW,cAA7BlD,OAAOmD,SAASC,UAEe,UAA7BpD,OAAOmD,SAASC,UAEhBpD,OAAOmD,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAiB,CACrBC,UAAU,EACVC,eAAe,EACfC,MAAO,IACPC,OAAQ,IACRC,OAAO,EACPC,QAAS,CACLtC,OAAQ,CACJuC,OAAO,EACPC,OAAO,EACPC,UAAW,KACXC,OAAO,KAKjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAASb,IAEZnD,SAASkC,eAAe,SDyGpB,kBAAmB+B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAP,GACLP,QAAQO,MAAMA,EAAM0C,c","file":"static/js/main.49f0067a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n\nimport 'video.js/dist/video-js.css';\nimport videojs from 'video.js';\n\nimport 'webrtc-adapter';\nimport RecordRTC from 'recordrtc';\n\n\nimport 'videojs-record/dist/css/videojs.record.css';\nimport Record from 'videojs-record/dist/videojs.record.js';\n\nclass App extends Component {\n  componentDidMount() {\n\n    window.onblur = function (event) {\n      if (document.fullscreenElement) {\n        event.preventDefault()\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        }\n      }\n    }\n\n\n    this.player = videojs(this.videoNode, this.props, () => {\n      // print version information at startup\n      const version_info = 'Using video.js ' + videojs.VERSION +\n        ' with videojs-record ' + videojs.getPluginVersion('record') +\n        ' and recordrtc ' + RecordRTC.version;\n      videojs.log(version_info);\n    });\n\n    this.player.on('deviceReady', () => {\n      this.player.record().start();\n      document.addEventListener('fullscreenchange', (event) => {\n        if (document.fullscreenElement) {\n          console.log(`Element: ${document.fullscreenElement.id} entered full-screen mode.`);\n        } else {\n          event.preventDefault();\n          var question = window.confirm('Apakah anda yakin untuk keluar mode fullscreen? ')\n          if (!question) {\n            this.fullscreen();\n          } else {\n            this.player.record().stopDevice();\n          }\n        }\n      });\n\n    });\n\n    this.player.on('startRecord', () => {\n      this.fullscreen();\n    });\n\n    this.player.on('finishRecord', () => {\n      this.player.record().saveAs({ 'video': 'video1.mp4' });\n    });\n\n    this.player.on('error', (element, error) => {\n      console.warn(error);\n    });\n\n    this.player.on('deviceError', () => {\n      console.error('device error:', this.player.deviceErrorCode);\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose();\n    }\n  }\n  fullscreen() {\n    var elem = document.getElementById(\"myVideo\")\n    if (elem.requestFullscreen) {\n      elem.requestFullscreen().catch(err => {\n        alert(`coba lagi ada kemungkina error ketika menggunakan button ESC`);\n      });\n    }\n  }\n\n  closeFullscreen() {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n\n        <div data-vjs-player>\n          <video id=\"myVideo\" ref={node => this.videoNode = node} className=\"video-js vjs-default-skin\" playsInline></video>\n        </div>\n        <button onClick={() => { this.player.record().getDevice() }}>PLAY</button>\n\n        <button onClick={() => { this.player.record().stopDevice() }}>STOP</button>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst videoJsOptions = {\n  controls: true,\n  bigPlayButton: false,\n  width: 320,\n  height: 240,\n  fluid: false,\n  plugins: {\n      record: {\n          audio: true,\n          video: true,\n          maxLength: 3600,\n          debug: true\n      }\n  }\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App { ...videoJsOptions } />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}